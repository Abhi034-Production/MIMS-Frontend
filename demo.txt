
require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bcrypt = require("bcrypt");
const SignupModel = require("./models/adminsignup");
const ProductModel = require("./models/product");
const IntradayEntry = require("./models/intradayentrymodel");



const nodemailer = require("nodemailer");
const BusinessProfile = require("./models/businessprofile");
const multer = require("multer");
const path = require("path");

// Multer config for file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, "uploads"));
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + '-' + file.originalname);
  }
});
const upload = multer({ storage });

// Ensure uploads directory exists
const fs = require("fs");
const uploadsDir = path.join(__dirname, "uploads");
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir);
}

const app = express();

let otpStore = {};

const allowedOrigins = ["https://mimsp.netlify.app" , "http://localhost:5173"];

app.use(
  cors({
    origin: function (origin, callback) {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error("Not allowed by CORS"));
      }
    },
    credentials: true,
    methods: ["GET", "POST", "PUT", "DELETE"],
  })
);


app.use(express.json());
app.use("/uploads", express.static(path.join(__dirname, "uploads")));



mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("MongoDB Connected"))
  .catch(err => console.log("MongoDB Connection Error:", err));


app.get("/run", (req, res) => {
  res.send("Backend is running!");
});



// Get Intraday Entries by business email
app.get("/intraday-entries", async (req, res) => {
  try {
    const { userEmail } = req.query;
    if (!userEmail) return res.status(400).json({ error: "userEmail is required" });
    const entries = await IntradayEntry.find({ userEmail });
    res.json(entries);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete Intraday Entry by ID
app.delete("/intraday-entry/:id", async (req, res) => {
  try {
    await IntradayEntry.findByIdAndDelete(req.params.id);
    res.json({ message: "Entry deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Edit Intraday Entry by ID
app.put("/intraday-entry/:id", async (req, res) => {
  try {
    const updated = await IntradayEntry.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(updated);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Save Intraday Entry
app.post("/intraday-new-entry", async (req, res) => {
  try {
    const entry = new IntradayEntry(req.body);
    await entry.save();
    res.status(201).json({ message: "Intraday entry saved successfully!" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


app.post("/business-profile", upload.fields([
  { name: "businessLogo", maxCount: 1 },
  { name: "businessStamp", maxCount: 1 }
]), async (req, res) => {
  try {
    const {
      userEmail,
      businessName,
      businessMobile,
      businessAddress,
      businessEmail,
      businessCategory,
    } = req.body;

    // File paths
    let businessLogo = null;
    let businessStamp = null;
    if (req.files["businessLogo"]) {
      businessLogo = `/uploads/${req.files["businessLogo"][0].filename}`;
    }
    if (req.files["businessStamp"]) {
      businessStamp = `/uploads/${req.files["businessStamp"][0].filename}`;
    }

    // Upsert: update if exists, else create
    const update = {
      businessName,
      businessMobile,
      businessAddress,
      businessEmail,
      businessCategory,
    };
    if (businessLogo) update.businessLogo = businessLogo;
    if (businessStamp) update.businessStamp = businessStamp;

    const profile = await BusinessProfile.findOneAndUpdate(
      { userEmail },
      update,
      { new: true, upsert: true }
    );
    console.log("[ALERT] Business profile created/updated for:", userEmail);
    res.json({ status: "success", profile });
  } catch (error) {
    console.error("[ALERT] Error in /business-profile:", error.message);
    res.status(500).json({ status: "error", message: error.message });
  }
});

// Get business profile by user email
app.get("/business-profile/:userEmail", async (req, res) => {
  try {
    const { userEmail } = req.params;
    const profile = await BusinessProfile.findOne({ userEmail });
    if (!profile) {
      console.log(`[ALERT] Business profile not found for: ${userEmail}`);
      return res.status(404).json({ status: "not_found" });
    }
    console.log(`[ALERT] Business profile fetched for: ${userEmail}`);
    res.json({ status: "success", profile });
  } catch (error) {
    console.error("[ALERT] Error in GET /business-profile/:userEmail:", error.message);
    res.status(500).json({ status: "error", message: error.message });
  }
});

// Update business profile (edit)
app.put("/business-profile/:userEmail", upload.fields([
  { name: "businessLogo", maxCount: 1 },
  { name: "businessStamp", maxCount: 1 }
]), async (req, res) => {
  try {
    const { userEmail } = req.params;
    const {
      businessName,
      businessMobile,
      businessAddress,
      businessEmail,
      businessCategory,
    } = req.body;

    // File paths
    let businessLogo = null;
    let businessStamp = null;
    if (req.files["businessLogo"]) {
      businessLogo = `/uploads/${req.files["businessLogo"][0].filename}`;
    }
    if (req.files["businessStamp"]) {
      businessStamp = `/uploads/${req.files["businessStamp"][0].filename}`;
    }

    // Build update object
    const update = {
      businessName,
      businessMobile,
      businessAddress,
      businessEmail,
      businessCategory,
    };
    if (businessLogo) update.businessLogo = businessLogo;
    if (businessStamp) update.businessStamp = businessStamp;

    const profile = await BusinessProfile.findOneAndUpdate(
      { userEmail },
      update,
      { new: true }
    );
    if (!profile) {
      return res.status(404).json({ status: "not_found" });
    }
    console.log("[ALERT] Business profile updated for:", userEmail);
    res.json({ status: "success", profile });
  } catch (error) {
    console.error("[ALERT] Error in PUT /business-profile/:userEmail:", error.message);
    res.status(500).json({ status: "error", message: error.message });
  }
});


const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Non-OTP Login
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await SignupModel.findOne({ email });

  if (user) {
    if (await bcrypt.compare(password, user.password)) {
      res.send("success");
    } else {
      res.send("incorrect password");
    }
  } else {
    res.send("no record exists");
  }
});

// Get user data
app.post("/get-user", async (req, res) => {
  const { email } = req.body;
  const user = await SignupModel.findOne({ email });

  if (user) {
    res.json({ status: "success", name: user.name });
  } else {
    res.status(404).json({ status: "error", message: "User not found" });
  }
});

// Update Admin Info
app.put("/update-admin", async (req, res) => {
  const { email, name, password } = req.body;
  try {
    const update = { name };
    if (password) {
      update.password = await bcrypt.hash(password, 10);
    }
    await SignupModel.findOneAndUpdate({ email }, update);
    res.json({ status: "success" });
  } catch (error) {
    res.status(500).json({ status: "error", message: error.message });
  }
});

app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await SignupModel.findOne({ email });
  if (user) {
    if (await bcrypt.compare(password, user.password)) {
      res.json("success");
    } else {
      res.json("incorrect password");
    }
  } else {
    res.json("no record exists");
  }
});

app.post("/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await SignupModel.create({ name, email, password: hashedPassword });
    res.json(newUser);
  } catch (err) {
    res.status(500).json(err);
  }
});

// Add Products
app.post("/add-product", async (req, res) => {
  try {
    const { name, quantity, price, email } = req.body;
    const newProduct = await ProductModel.create({ name, quantity, price, email });
    res.json(newProduct);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Fetch All Products
app.get("/products", async (req, res) => {
  try {
    const { email } = req.query;
    let products;
    if (email) {
      products = await ProductModel.find({ email });
    } else {
      products = await ProductModel.find();
    }
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Delete Product
app.delete("/delete-product/:id", async (req, res) => {
  try {
    await ProductModel.findByIdAndDelete(req.params.id);
    res.json({ message: "Product deleted successfully" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Update Product
app.put("/update-product/:id", async (req, res) => {
  try {
    const { name, quantity, price, email } = req.body;
    const updatedProduct = await ProductModel.findByIdAndUpdate(
      req.params.id,
      { name, quantity, price, email },
      { new: true }
    );
    res.json(updatedProduct);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});


const Bill = require("./models/billmodel");

app.post("/save-bill", async (req, res) => {
  try {
    // Attach businessEmail to bill and to each order item
    const { businessEmail, ...rest } = req.body;
    const orderWithEmail = (rest.order || []).map(item => ({ ...item, email: businessEmail }));
    const newBill = new Bill({ ...rest, businessEmail, order: orderWithEmail });
    await newBill.save();

    for (const item of orderWithEmail) {
      const updatedProduct = await ProductModel.findOneAndUpdate(
        { name: item.productName },
        { $inc: { quantity: -item.quantity } },
        { new: true }
      );
      if (updatedProduct && updatedProduct.quantity <= 0) {
        await ProductModel.findByIdAndUpdate(updatedProduct._id, { quantity: 0 });
      }
    }

    res.status(201).json({ message: "Bill saved & inventory updated successfully!" });
  } catch (error) {
    res.status(500).json({ error: "Error saving bill or updating inventory." });
  }
});






app.get("/top-selling-products", async (req, res) => {
  try {
    const bills = await Bill.find();
    const products = await ProductModel.find();

    let productSales = {};

    bills.forEach((bill) => {
      bill.order.forEach((item) => {
        if (productSales[item.productName]) {
          productSales[item.productName] += item.quantity;
        } else {
          productSales[item.productName] = item.quantity;
        }
      });
    });

    const productDetails = products.map((product) => {
      const soldQuantity = productSales[product.name] || 0;
      const isOutOfStock = product.quantity <= 0;
      return {
        name: product.name,
        quantitySold: soldQuantity,
        quantityInStock: product.quantity,
        isOutOfStock
      };
    });

    const sortedProducts = productDetails
      .sort((a, b) => b.quantitySold - a.quantitySold);

    res.json(sortedProducts);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch top-selling products." });
  }
});




app.get("/bills", async (req, res) => {
  try {
    const { businessEmail } = req.query;
    let bills;
    if (businessEmail) {
      bills = await Bill.find({ businessEmail });
    } else {
      bills = await Bill.find();
    }
    res.json(bills);
  } catch (error) {
    res.status(500).json({ error: "Failed to fetch bills" });
  }
});




const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});



import React, { useState, useEffect, useRef, useContext } from "react";
import { AuthContext } from "../Context/AuthContext";
import axios from "axios";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import AdminLayout from "../Components/AdminLayout";
import { Link } from "react-router-dom";
import { MdFileDownload, MdSearch, MdOutlineHome } from "react-icons/md";
import { Helmet } from "react-helmet-async";
import Seo from "../Components/Seo";


const Orders = () => {
  const shareInvoiceOnWhatsApp = async () => {
    const buttons = document.querySelector("#invoice-actions");
    if (buttons) buttons.style.display = "none";
    try {
      const canvas = await html2canvas(invoiceRef.current, {
        scale: 1.5,
        quality: 0.8,
        logging: false,
        useCORS: true,
        backgroundColor: "#FFFFFF"
      });
      const imgData = canvas.toDataURL("image/jpeg", 0.8);
      const pdf = new jsPDF("p", "mm", "a5");
      const pageWidth = pdf.internal.pageSize.getWidth();
      const imgProps = pdf.getImageProperties(imgData);
      const pdfHeight = (imgProps.height * pageWidth) / imgProps.width;
      pdf.addImage(imgData, "JPEG", 0, 0, pageWidth, pdfHeight);
      const pdfBlob = pdf.output("blob");
      const formData = new FormData();
      formData.append("file", pdfBlob, `invoice_${selectedBill._id}.pdf`);
      const uploadResponse = await fetch("https://tmpfiles.org/api/v1/upload", {
        method: "POST",
        body: formData
      });
      const uploadData = await uploadResponse.json();
      if (!uploadData?.data?.url) {
        throw new Error("Failed to upload PDF");
      }
      const pdfUrl = uploadData.data.url.replace("tmpfiles.org/", "tmpfiles.org/dl/");
      const name = selectedBill?.customer?.name || "Customer";
      let mobile = selectedBill?.customer?.mobile || "";
      mobile = mobile.replace(/\D/g, "");
      if (!mobile.startsWith("91")) mobile = "91" + mobile;
      const message = `Hello ${name},\n\nHere is your invoice from ${businessProfile?.businessName || 'Our Shop'}:\n${pdfUrl}\n\nThank you for your business!`;
      const whatsappLink = `https://wa.me/${mobile}?text=${encodeURIComponent(message)}`;
      window.open(whatsappLink, "_blank");
    } catch (err) {
      alert("Error sharing invoice. Please try downloading and sharing manually.");
    } finally {
      if (buttons) buttons.style.display = "flex";
    }
  };
  const [bills, setBills] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredBills, setFilteredBills] = useState([]);
  const [highlightedId, setHighlightedId] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedBill, setSelectedBill] = useState(null);
  const [imagesLoaded, setImagesLoaded] = useState(false);
  const invoiceRef = useRef(null);
  const ordersPerPage = 7;
  const { user } = useContext(AuthContext);
  const [businessProfile, setBusinessProfile] = useState(null);


  useEffect(() => {
    if (!user || !user.email) return;
    fetch(`https://mims-backend-x0i3.onrender.com/business-profile/${user.email}`)
      .then((res) => res.json())
      .then((data) => {
        if (data.status === "success") {
          setBusinessProfile(data.profile);
        }
      })
      .catch(() => { });
  }, [user]);

  useEffect(() => {
    axios.get(`https://mims-backend-x0i3.onrender.com/bills`)
      .then((res) => {
        const sorted = res.data.sort((a, b) => new Date(b.billDate) - new Date(a.billDate));
        if (businessProfile && businessProfile.businessEmail) {
          const filtered = sorted.filter(bill => bill.businessEmail && bill.businessEmail === businessProfile.businessEmail);
          setBills(filtered);
          setFilteredBills(filtered);
        } else {
          setBills(sorted);
          setFilteredBills(sorted);
        }
      }).catch((err) => console.error("Error fetching:", err));
  }, [businessProfile]);

  const handleSearchClick = () => {
    const filtered = bills.filter(bill =>
      bill.customer.name.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setFilteredBills(filtered);
    setCurrentPage(1);
    setHighlightedId(filtered.length > 0 ? filtered[0]._id : null);
  };

  const handleDownloadInvoice = (bill) => {
    setSelectedBill(bill);
    setImagesLoaded(false);

    const logo = new Image();
    logo.src = businessProfile?.businessLogo ? `https://mims-backend-x0i3.onrender.com${businessProfile.businessLogo}` : "Please upload a logo";

    const stamp = new Image();
    stamp.src = businessProfile?.businessStamp ? `https://mims-backend-x0i3.onrender.com${businessProfile.businessStamp}` : "Please upload a stamp";

    Promise.all([
      new Promise(resolve => { logo.onload = resolve; }),
      new Promise(resolve => { stamp.onload = resolve; })
    ]).then(() => {
      setImagesLoaded(true);
    });
  };

  const closeModal = () => {
    setSelectedBill(null);
  };


  const downloadInvoiceAsPDF = () => {
    if (!imagesLoaded) {
      alert("Images are still loading. Please try again in a moment.");
      return;
    }

    const buttons = document.querySelector("#invoice-actions");
    if (buttons) buttons.style.display = "none";

    setTimeout(async () => {
      try {
        const canvas = await html2canvas(invoiceRef.current, {
          scale: 1.5,
          quality: 0.8,
          logging: false,
          useCORS: true,
          backgroundColor: "#FFFFFF"
        });

        const imgData = canvas.toDataURL("image/jpeg", 0.8);
        const pdf = new jsPDF("p", "mm", "a5");
        const pageWidth = pdf.internal.pageSize.getWidth();
        const imgProps = pdf.getImageProperties(imgData);
        const pdfHeight = (imgProps.height * pageWidth) / imgProps.width;

        pdf.addImage(imgData, "JPEG", 0, 0, pageWidth, pdfHeight);
        pdf.save(`Invoice_${selectedBill._id}.pdf`);
      } catch (error) {
        alert("Error generating PDF");
      } finally {
        if (buttons) buttons.style.display = "flex";
        closeModal();
      }
    }, 200);
  };

  const indexOfLastOrder = currentPage * ordersPerPage;
  const indexOfFirstOrder = indexOfLastOrder - ordersPerPage;
  const currentOrders = filteredBills.slice(indexOfFirstOrder, indexOfLastOrder);
  const totalPages = Math.ceil(filteredBills.length / ordersPerPage);

  return (
    <AdminLayout>

      <Seo
        title="Orders | easyinventory"
        description="View and manage all customer orders in easyinventory. Download invoices, share via WhatsApp, and keep track of your business."
        keywords="orders, invoices, billing, customer orders, easyinventory"
        canonical="/orders"
        url="https://easyinventory.online/orders"
      />

      <div className="text-sm text-gray-600 mb-4 dark:text-white">
        <nav className="flex items-center space-x-2">
          <Link to="/home"><MdOutlineHome fontSize={20} /></Link>
          <span className="text-gray-400 dark:text-white">/</span>
          <span className="font-semibold text-gray-800 dark:text-white">Orders</span>
        </nav>
      </div>

      <div className="p-6 min-h-screen bg-gray-50 dark:bg-gray-900 dark:text-white transition-colors">
        <div className="flex flex-col sm:flex-row justify-end items-center gap-4">
          <input
            type="search"
            className="w-full sm:w-auto border border-gray-300 rounded-md px-4 py-2 dark:bg-gray-900 dark:text-white dark:border-gray-600"
            placeholder="Search Customer Name..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
          <button
            className="bg-blue-500 hover:bg-blue-600 text-white text-2xl px-4 py-2 rounded-md"
            onClick={handleSearchClick}
          >
            <MdSearch />
          </button>
        </div>

        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-2 mb-6 mt-6 sm:p-0 transition-colors">
          <table className="w-full text-center text-[10px] xs:text-xs sm:text-sm md:text-base table-fixed break-words">
            <thead className="bg-gray-100 dark:bg-gray-700">
              <tr>
                <th className="px-1 py-2 sm:px-2 sm:py-4 dark:text-white whitespace-normal">Customer Name</th>
                <th className="px-1 py-2 sm:px-2 dark:text-white whitespace-normal">Products</th>
                <th className="px-1 py-2 sm:px-2 dark:text-white whitespace-normal">Total Price</th>
                <th className="px-1 py-2 sm:px-2 dark:text-white whitespace-normal">Date</th>
                <th className="px-1 py-2 sm:px-2 dark:text-white whitespace-normal">Invoice</th>
              </tr>
            </thead>
            <tbody>
              {currentOrders.map(bill => (
                <tr key={bill._id} className={highlightedId === bill._id ? "bg-blue-50 dark:bg-blue-900 text-center border-b" : "text-center border-b"}>
                  <td className="py-1 px-1 sm:px-2 capitalize whitespace-normal break-words">{bill.customer.name}</td>
                  <td className="py-1 px-1 sm:px-2 text-left whitespace-normal break-words">
                    <ul className="list-decimal pl-4">
                      {bill.order.map((item, i) => (
                        <li key={i} className="dark:text-white">{item.productName} (x{item.quantity}) - ₹{item.price}</li>
                      ))}
                    </ul>
                  </td>
                  <td className="py-1 px-1 sm:px-2 text-blue-600 font-semibold whitespace-normal break-words">₹{bill.total}</td>
                  <td className="py-1 px-1 sm:px-2 whitespace-normal break-words">{new Date(bill.billDate).toLocaleString()}</td>
                  <td className="py-1 px-1 sm:px-2 whitespace-normal break-words">
                    <button onClick={() => handleDownloadInvoice(bill)}>
                      <MdFileDownload className="text-blue-600 text-xl" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        <div className="flex justify-between items-center mt-6 dark:text-white">
          <button
            onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
            disabled={currentPage === 1}
            className="px-4 py-2 bg-gray-300 dark:bg-gray-700 dark:border dark:border-gray-600 rounded disabled:opacity-50 dark:text-white transition-colors">
            <span className="dark:text-white">Previous</span>
          </button>
          <span className="text-sm font-semibold dark:text-white">Page {currentPage} of {totalPages}</span>
          <button
            onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
            disabled={currentPage === totalPages}
            className="px-4 py-2 bg-gray-300 dark:bg-gray-700 dark:border dark:border-gray-600 rounded disabled:opacity-50 dark:text-white transition-colors">
            <span className="dark:text-white">Next</span>
          </button>
        </div>

        {selectedBill && (
          <div className="fixed inset-0 w-1/2 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
            <div className="bg-white dark:text-black text-black p-4 rounded shadow-lg w-full max-w-[850px] max-h-[90vh] overflow-auto">
              <div ref={invoiceRef} className="p-4">
                <style>{`
                  body {
                    font-family: 'Helvetica', Arial, sans-serif;
                    background-color: #f8e1e1;
                    margin: 0;
                    padding: 0;
                  }
                  
                  th {
                    background-color: #d32f2f;
                    color: #fff;
                  }
                `}</style>
                <div className="max-w-[800px] mx-auto bg-white p-6 rounded-lg shadow-lg font-sans">
                  <div className="text-center border-b-2 border-[#f0b8b8] pb-4 mb-6">
                    <div className="flex flex-row-reverse w-full p-2">
                      <div className="w-9/12">
                        <h1 className="text-10xl font-extrabold text-center my-2 text-[26px] text-[#d32f2f]">
                          {businessProfile?.businessName || 'Business Name'}
                        </h1>
                      </div>
                      <div className="w-3/12 flex items-center">
                        <img
                          className="block m-auto -top-4 w-full h-full"
                          src={businessProfile?.businessLogo ? `https://mims-backend-x0i3.onrender.com${businessProfile.businessLogo}` : "Please upload a logo"}
                          alt="Business Logo"
                        />
                      </div>
                    </div>
                    <div>
                      <p className="my-1 text-[#444]">{businessProfile?.businessAddress || 'Business Address'}</p>
                      <p className="my-1 text-[#444]">
                        Phone: {businessProfile?.businessMobile || ''} | Email: {businessProfile?.businessEmail || ''}
                      </p>
                    </div>
                  </div>

                  <div className="w-[48%]">
                    <div>
                      <p><strong>Invoice Number:</strong> INV-{selectedBill._id.slice(-6).toUpperCase()}</p>
                      <p><strong>Date:</strong> {new Date(selectedBill.billDate).toDateString()}</p>
                    </div>
                    <div>
                      <p className="hidden"><strong>Due Date:</strong> {new Date(new Date(selectedBill.billDate).getTime() + 7 * 86400000).toDateString()}</p>
                      <p><strong>Payment Terms:</strong> Payment Receipt</p>
                    </div>
                  </div>

                  <div className="flex justify-between mb-6 ">
                    <div>
                      <p className="my-1 text-[#444]"><strong>Customer Details:</strong></p>
                      <p className="my-1 text-[#444]">{selectedBill.customer.name}</p>
                      <p className="my-1 text-[#444]">Email: {selectedBill.customer.email}</p>
                      <p className="my-1 text-[#444]">Mobile: {selectedBill.customer.mobile}</p>
                    </div>
                  </div>

                  <table className="w-full border-collapse mb-6">
                    <thead>
                      <tr>
                        <th>Item</th>
                        <th>Quantity</th>
                        <th>Unit Price</th>
                        <th>Total</th>
                      </tr>
                    </thead>
                    <tbody>
                      {selectedBill.order.map((item, i) => (
                        <tr key={i}>
                          <td className="border border-[#f0b8b8] p-2 text-left">{item.productName}</td>
                          <td className="border border-[#f0b8b8] p-2 text-left">{item.quantity}</td>
                          <td className="border border-[#f0b8b8] p-2 text-left">₹{item.price}</td>
                          <td className="border border-[#f0b8b8] p-2 text-left">₹{item.totalPrice}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>

                  <div className="text-right font-bold text-[16px] text-[#b71c1c] mt-2">
                    <p>Total: ₹{selectedBill.total}</p>
                  </div>

                  <div className="text-center  text-[13px] text-[#666] border-t border-[#f0b8b8] pt-4 flex flex-col md:flex-row justify-between mt-0 items-center">
                    <div className="text-left">
                      <p>Thank you for shopping at {businessProfile?.businessName || 'Business Name'}!</p>
                      <p>Terms: All sales are final. Contact us for warranty details.</p>
                    </div>
                    <div className="text-center mt-5">
                      <img
                        className="w-24 h-24 md:w-32 md:h-32 object-contain max-w-[120px] my-[10px]"
                        src={businessProfile?.businessStamp ? `https://mims-backend-x0i3.onrender.com${businessProfile.businessStamp}` : "Please upload a stamp"}
                        alt="Shop Stamp"
                      />
                    </div>
                  </div>
                </div>
              </div>

              <div id="invoice-actions" className="flex flex-wrap justify-end gap-3 mt-4 p-4 sticky bottom-0 bg-white">
                <button
                  onClick={downloadInvoiceAsPDF}
                  className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
                >
                  Download PDF
                </button>
                <button
                  onClick={shareInvoiceOnWhatsApp}
                  className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                >
                  Share via WhatsApp
                </button>
                <button
                  onClick={closeModal}
                  className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default Orders;

import React, { useEffect, useState, useContext, useRef } from "react";
import AdminLayout from "../Components/AdminLayout";
import { AuthContext } from "../Context/AuthContext";
import { Link } from "react-router-dom";
import { MdOutlineHome, MdFileDownload } from 'react-icons/md';
import Spinner from '../Components/Spinner'
import { Helmet } from "react-helmet-async";
import Seo from "../Components/Seo";

const BusinessDetail = () => {
  const { user } = useContext(AuthContext);
  const [profile, setProfile] = useState(null);
  const [editMode, setEditMode] = useState(true);
  const [form, setForm] = useState({});
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState("");
  const isEditingRef = useRef(false);

  useEffect(() => {
    if (!user || !user.email) return;
    setLoading(true);
    fetch(`https://mims-backend-x0i3.onrender.com/business-profile/${user.email}`)
      .then((res) => res.json())
      .then((data) => {
        if (data.status === "success") {
          setProfile(data.profile);
          if (!isEditingRef.current) {
            setForm(data.profile);
          }
        }
        setLoading(false);
      })
      .catch(() => setLoading(false));
  }, [user]);


  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleFileChange = (e) => {
    const { name, files } = e.target;
    setForm((prev) => ({ ...prev, [name]: files[0] }));
  };

  const handleEdit = () => {
    isEditingRef.current = true;
    setEditMode(true);
    setMessage("");
  };

  const handleCancel = () => {
    isEditingRef.current = false;
    setEditMode(false);
    setForm(profile);
    setMessage("");
  };

  const handleSave = async (e) => {
    e.preventDefault();
    setMessage("");

    const formData = new FormData();
    Object.entries(form).forEach(([key, value]) => {
      formData.append(key, value);
    });
    formData.append("userEmail", user.email);

    try {
      const res = await fetch("https://mims-backend-x0i3.onrender.com/business-profile", {
        method: "POST",
        body: formData,
      });

      const data = await res.json();
      if (data.status === "success") {
        setProfile(data.profile);
        setForm(data.profile);
        setEditMode(false);
        isEditingRef.current = false;
        setMessage("Profile updated successfully!");
      } else {
        setMessage(data.message || "Update failed");
      }
    } catch {
      setMessage("Update failed");
    }
  };

  if (loading) return <AdminLayout> <div className="text-center py-10"><Spinner /></div></AdminLayout>;
  if (!profile) return <AdminLayout> <div className="text-center py-10 text-red-500">No business profile found.</div></AdminLayout>;

  return (
    <AdminLayout>

      <Seo
        title="Business Details | easyinventory"
        description="View and update your business profile including name, contact info, logo, and stamp on easyinventory."
        keywords="business profile, business details, company logo, business stamp, easyinventory"
        url="https://easyinventory.online/business-details"
      />


      <div className="text-sm text-gray-600 mb-4 dark:text-white">
        <nav className="flex items-center space-x-2 dark:text-white">
          <Link to='/home'><MdOutlineHome fontSize={20} /></Link>
          <span className="text-gray-400 dark:text-white">/</span>
          <span className="font-semibold text-gray-800 dark:text-white">Business-Details</span>
        </nav>
      </div>


      <div className="w-full mx-auto bg-white dark:bg-gray-900 p-6 sm:p-8 md:p-10 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-800 mt-10">
        <h2 className="hidden text-3xl sm:text-4xl font-extrabold mb-8 sm:mb-10 text-gray-800 dark:text-white text-center tracking-wide">Business Details</h2>
        {message && <div className="mb-5 text-center hidden text-green-600 font-semibold text-base sm:text-lg">{message}</div>}
        <form onSubmit={handleSave} encType="multipart/form-data">
          <div className="flex flex-col gap-6 md:gap-8 w-full">
            <div className="flex-1 flex flex-col gap-5 sm:gap-7 bg-gray-50/80 dark:bg-gray-800/80 rounded-xl shadow p-4 sm:p-8 w-full min-w-[220px]">
              <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-4">
                <span className="w-40 sm:w-48 font-semibold text-gray-700 dark:text-white text-base sm:text-lg">Business Name:</span>
                {editMode ? (
                  <input type="text" name="businessName" value={form.businessName || ""} onChange={handleChange} required className="flex-1 px-3 sm:px-5 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-900 dark:text-white text-base sm:text-lg" />
                ) : (
                  <span className="text-base sm:text-xl text-gray-900 dark:text-white font-semibold">{profile.businessName}</span>
                )}
              </div>
              <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-4">
                <span className="w-40 sm:w-48 font-semibold text-gray-700 dark:text-white text-base sm:text-lg">Mobile Number:</span>
                {editMode ? (
                  <input type="tel" name="businessMobile" value={form.businessMobile || ""} onChange={handleChange} required className="flex-1 px-3 sm:px-5 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-900 dark:text-white text-base sm:text-lg" />
                ) : (
                  <span className="text-base sm:text-xl text-gray-900 dark:text-white font-semibold">{profile.businessMobile}</span>
                )}
              </div>
              <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-4">
                <span className="w-40 sm:w-48 font-semibold text-gray-700 dark:text-white text-base sm:text-lg">Address:</span>
                {editMode ? (
                  <input type="text" name="businessAddress" value={form.businessAddress || ""} onChange={handleChange} required className="flex-1 px-3 sm:px-5 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-900 dark:text-white text-base sm:text-lg" />
                ) : (
                  <span className="text-base sm:text-xl text-gray-900 dark:text-white font-semibold">{profile.businessAddress}</span>
                )}
              </div>
              <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-4">
                <span className="w-40 sm:w-48 font-semibold text-gray-700 dark:text-white text-base sm:text-lg">Email:</span>
                {editMode ? (
                  <input type="email" name="businessEmail" value={form.businessEmail || ""} onChange={handleChange} readOnly className="flex-1 px-3 sm:px-5 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-900 dark:text-white text-base sm:text-lg" />
                ) : (
                  <span className="text-base sm:text-xl text-gray-900 dark:text-white font-semibold">{profile.businessEmail}</span>
                )}
              </div>
              <div className="flex flex-col sm:flex-row items-center gap-2 sm:gap-4">
                <span className="w-40 sm:w-48 font-semibold text-gray-700 dark:text-white text-base sm:text-lg">Category:</span>
                {editMode ? (
                  <input type="text" name="businessCategory" value={form.businessCategory || ""} onChange={handleChange} required className="flex-1 px-3 sm:px-5 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-900 dark:text-white text-base sm:text-lg" />
                ) : (
                  <span className="text-base sm:text-xl text-gray-900 dark:text-white font-semibold">{profile.businessCategory}</span>
                )}
              </div>
              <div className="flex flex-col sm:flex-row gap-6 sm:gap-10 mt-6 justify-center items-center">
                <div className="flex flex-col items-center bg-white dark:bg-gray-900 rounded-xl shadow p-4 w-full max-w-xs">
                  <span className="font-semibold text-gray-700 dark:text-white mb-2 text-base sm:text-lg">Business Logo</span>
                  {editMode ? (
                    <input type="file" name="businessLogo" accept="image/*" onChange={handleFileChange} className="w-28 sm:w-36 md:w-44 text-gray-700 dark:text-white" />
                  ) : profile.businessLogo ? (
                    <img src={`https://mims-backend-x0i3.onrender.com${profile.businessLogo}`} alt="Logo" className="h-20 w-20 sm:h-28 sm:w-28 md:h-32 md:w-32 object-cover rounded-full border-2 border-blue-300 dark:border-blue-700 shadow bg-white" />
                  ) : (
                    <span className="text-gray-400 italic">No logo</span>
                  )}
                </div>
                <div className="flex flex-col items-center bg-white dark:bg-gray-900 rounded-xl shadow p-4 w-full max-w-xs">
                  <span className="font-semibold text-gray-700 dark:text-white mb-2 text-base sm:text-lg">Business Stamp/Sign</span>
                  {editMode ? (
                    <input type="file" name="businessStamp" accept="image/*" onChange={handleFileChange} className="w-28 sm:w-36 md:w-44 text-gray-700 dark:text-white" />
                  ) : profile.businessStamp ? (
                    <img src={`https://mims-backend-x0i3.onrender.com${profile.businessStamp}`} alt="Stamp" className="h-20 w-20 sm:h-28 sm:w-28 md:h-32 md:w-32 object-cover rounded-full border-2 border-blue-300 dark:border-blue-700 shadow bg-white" />
                  ) : (
                    <span className="text-gray-400 italic">No stamp/sign</span>
                  )}
                </div>
              </div>
            </div>
          </div>
          <div className="flex flex-wrap gap-4 sm:gap-6 mt-8 sm:mt-12 justify-center">
            {editMode ? (
              <>
                <button type="submit" className="bg-blue-600 text-white font-bold py-2 px-8 sm:py-2.5 sm:px-12 rounded-xl shadow text-base sm:text-lg transition-all">Save</button>
                <button type="button" onClick={handleCancel} className="bg-gray-400 text-white font-bold py-2 px-8 sm:py-2.5 sm:px-12 rounded-xl shadow text-base sm:text-lg transition-all">Cancel</button>
              </>
            ) : (
              <button type="button" onClick={handleEdit} className="bg-blue-600 hidden text-white font-bold py-2 px-8 sm:py-2.5 sm:px-12 rounded-xl shadow text-base sm:text-lg transition-all">Edit</button>
            )}
          </div>
        </form>
      </div>

      <div className="w-full mx-auto bg-white dark:bg-gray-900 p-6 sm:p-8 md:p-10 rounded-2xl shadow-xl border border-gray-200 dark:border-gray-800 mt-10">
        {/* Active User Card Template with Time and Info */}
        {user && (
          <div className="flex items-center gap-4 p-4 bg-blue-50 dark:bg-blue-900 rounded-xl shadow border border-blue-200 dark:border-blue-700">
            <div className="flex-shrink-0 h-12 w-12 rounded-full bg-blue-300 dark:bg-blue-700 flex items-center justify-center text-white text-xl font-bold">
              {user.name ? user.name.charAt(0).toUpperCase() : user.email.charAt(0).toUpperCase()}
            </div>
            <div>
              <div className="text-lg font-semibold text-gray-800 dark:text-white">{user.name || "Active User"}</div>
              <div className="text-base text-gray-600 dark:text-gray-300">{user.email}</div>

              {user.role && (
                <div className="text-sm text-gray-500 dark:text-gray-400">Role: User</div>
              )}
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default BusinessDetail;

